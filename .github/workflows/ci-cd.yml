name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feature/*

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:9.0
        env:
          MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}  
          MYSQL_DATABASE: ${DB_DATABASE}
          MYSQL_USER: ${DB_USERNAME}  
          MYSQL_PASSWORD: ${DB_PASSWORD}
        ports:
          - 3307:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Copy .env.example to .env
        run: cp fireX/.env.example fireX/.env

      # Set up Docker Compose
      - name: Set up Docker Compose
        run: |
          cd fireX 
          docker compose up -d --build
      # Wait for MySQL to be ready
      - name: Wait for MySQL
        run: |
          for i in {1..10}; do
            if docker exec firex-db mysqladmin ping -h"db" --silent; then
              echo "MySQL is ready!";
              break;
            fi
            echo "Waiting for MySQL...";
            sleep 5;
          done

      # Get container IDs dynamically
      - name: Get container IDs dynamically
        run: |
          # Navigate to the app directory (assuming your Docker Compose file is there)
          cd fireX  # Ensure we are in the correct directory

          # Get the container ID for the 'db' and 'web' services using 'docker-compose ps'
          DB_CONTAINER=$(docker compose ps -q db)  # MySQL container
          APP_CONTAINER=$(docker compose ps -q web)  # App container

          # Output the container IDs for verification
          echo "DB Container ID: $DB_CONTAINER"
          echo "App Container ID: $APP_CONTAINER"

          # Store the container IDs as environment variables for later steps
          echo "DB_CONTAINER=$DB_CONTAINER" >> $GITHUB_ENV
          echo "APP_CONTAINER=$APP_CONTAINER" >> $GITHUB_ENV
      # Install Composer dependencies inside the container
      - name: Install Composer dependencies inside the container
        run: |
          # Ensure we are in the correct directory
          cd fireX  # Navigate to the directory containing the Docker Compose file

          # Install Laravel dependencies inside the 'web' container (app container)
          echo "Installing Composer dependencies inside the app container ($APP_CONTAINER)..."
          docker exec "$APP_CONTAINER" sh -c "composer install --no-interaction"
     
      # Run Artisan Commands
      - name: Run Artisan Commands
        run: |
          cd fireX
          docker compose up -d --build
          # Fetch the container IDs (use this for debugging)
          APP_CONTAINER=$(docker compose ps -q web)
          DB_CONTAINER=$(docker compose ps -q db)
          echo $DB_HOST
          echo $DB_PORT
          echo $DB_USERNAME
          echo $DB_PASSWORD

          echo "App container: $APP_CONTAINER"
          echo "DB container: $DB_CONTAINER"
          until docker exec "$DB_CONTAINER" mysqladmin --user=root --password=$DB_PASSWORD --host=localhost --silent; do
              echo "Waiting for MySQL to be ready..."
              sleep 3
          done
          # Run the Laravel Artisan commands on the app container
          docker exec "$APP_CONTAINER" sh -c "php artisan migrate --force"
          docker exec "$APP_CONTAINER" sh -c "php artisan test"